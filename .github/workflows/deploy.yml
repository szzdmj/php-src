name: Build PHP WASM for Cloudflare Workers

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, Linux, x64]
env:
  EMSDK: ${{ github.workspace }}/emsdk
  EM_CONFIG: ${{ github.workspace }}/.emscripten
  EM_CACHE: ${{ github.workspace }}/.emscripten_cache
  EMCC_WASM_BACKEND: 1

  steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Emscripten SDK
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          echo "source $PWD/emsdk_env.sh" >> $GITHUB_ENV

      - name: Set environment for Emscripten
        run: source emsdk/emsdk_env.sh

      - name: Build libxml2 with Emscripten
        run: |
          mkdir -p libxml2/build
          cd libxml2
          curl -LO https://gitlab.gnome.org/GNOME/libxml2/-/archive/v2.11.7/libxml2-v2.11.7.tar.gz
          tar -xzf libxml2-v2.11.7.tar.gz --strip-components=1
          emconfigure ./autogen.sh --disable-shared --enable-static --without-python
          emmake make -j$(nproc)
          mkdir -p build/include build/lib
          cp -r include/libxml build/include/
          cp .libs/libxml2.a build/lib/

      - name: Build oniguruma with Emscripten
        run: |
          mkdir -p oniguruma/build
          cd oniguruma
          curl -LO https://github.com/kkos/oniguruma/releases/download/v6.9.9/onig-6.9.9.tar.gz
          tar -xzf onig-6.9.9.tar.gz --strip-components=1
          emconfigure ./configure --disable-shared --enable-static --prefix=$PWD/build
          emmake make -j$(nproc)
          emmake make install
          cd ..

      - name: Clean previous builds
        run: |
          git clean -xfd || true
          rm -f config.cache autom4te.cache || true

  - name: Configure and build PHP
        run: |
      cd php-src
      ./buildconf --force
          emconfigure ./configure \
            --host=wasm32-unknown-emscripten \
            --disable-all \
            --disable-cli \
            --disable-cgi \
            --disable-phpdbg \
            --disable-debug \
            --disable-opcache \
            --without-pear \
            --with-libxml \
            --enable-embed=static \
            --enable-simplexml \
            --enable-xml \
            --enable-session \
            --enable-mbstring \
            --enable-tokenizer \
            --enable-filter \
            --enable-posix \
         LIBXML_CFLAGS="-I$GITHUB_WORKSPACE/libxml2/build/include" \
        LIBXML_LIBS="-L$GITHUB_WORKSPACE/libxml2/build/lib -lxml2" \
        ONIG_CFLAGS="-I$GITHUB_WORKSPACE/oniguruma/build/include" \
        ONIG_LIBS="$GITHUB_WORKSPACE/oniguruma/build/lib/libonig.a"
      emmake make -j$(nproc)


      - name: Show config.log if configure fails
        if: failure()
        run: |
          echo "configure failed, showing config.log:"
          find . -name config.log -exec cat {} \;

      - name: Compile PHP to WASM
        run: |
          source ./emsdk/emsdk_env.sh
          emmake make -j$(nproc) > build.log 2>&1 || (cat build.log && false)

      - name: Package output into worker.js
        run: |
          mkdir -p dist
          WASM_FILE=$(find sapi -name '*.wasm' | head -n1)
          if [ ! -f "$WASM_FILE" ]; then echo "No .wasm file found!" && exit 1; fi
          base64 "$WASM_FILE" > dist/php.wasm.base64
          WASM_BASE64_CONTENT=$(cat dist/php.wasm.base64)
          cat > dist/worker.js <<EOF
          const wasmBase64 = \`${WASM_BASE64_CONTENT}\`;
          addEventListener('fetch', event => {
            event.respondWith(new Response('PHP WASM Ready'));
          });
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasmphp
          path: dist/
