name: Build PHP WASM for Cloudflare Workers

on:
 push:
  branches: [ master ]
 workflow_dispatch:

jobs:
  build-and-deploy:
   runs-on: [self-hosted, Linux, x64]
   steps:
   - name: Checkout source
     uses: actions/checkout@v4
   - name: Set up Emscripten SDK
run: |
    git clone https://github.com/emscripten-core/emsdk.git
    cd emsdk
    ./emsdk install latest
    ./emsdk activate latest
    - name: Export Emscripten env variables for later steps
     shell: bash
      run: |
         echo "EMSDK_ENV=$GITHUB_WORKSPACE/emsdk/emsdk_env.sh" >> $GITHUB_ENV
     - name: Clean previous builds
     run: |
      git clean -xfd || true
      make clean || true

    - name: Generate configure script
     run: |
     source "$EMSDK_ENV"
     ./buildconf --force   - name: Configure PHP with Emscripten
     run: |
      source "$EMSDK_ENV"
      emconfigure ./configure \
        --disable-all \
        --without-pear \
        --enable-session \
        --enable-mbstring \
        --with-curl \
        --without-libxml \
        --disable-cli
    - name: Compile PHP to WASM
     run: |
      source "$EMSDK_ENV"
      emmake make -j$(nproc) > build.log 2>&1 || (cat build.log && false)
    - name: Package output into worker.js
     run: |
      mkdir -p dist
      WASM_FILE=$(find sapi -name '*.wasm' | head -n1)
      if [ ! -f "$WASM_FILE" ]; then echo "No .wasm file found!" && exit 1; fi
      base64 "$WASM_FILE" > dist/php.wasm.base64
      echo "// Minimal Cloudflare Worker" > dist/worker.js
      echo "const wasmBase64 = \`$(cat dist/php.wasm.base64)\`;" >> dist/worker.js
      echo 'addEventListener("fetch", event => {' >> dist/worker.js
      echo '  event.respondWith(new Response("PHP WASM Ready"))' >> dist/worker.js
      echo '});' >> dist/worker.js
    - name: Upload artifact
     uses: actions/upload-artifact@v4
     with:
      name: wasmphp
      path: dist/
