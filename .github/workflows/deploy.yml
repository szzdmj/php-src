name: Build PHP WASM for Cloudflare Workers

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, Linux, x64]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Emscripten SDK
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest

      - name: Build libxml2 with Emscripten
        run: |
          source ./emsdk/emsdk_env.sh
          git clone https://gitlab.gnome.org/GNOME/libxml2.git
          cd libxml2
          git checkout v2.9.14

          # Generate configure script if missing
          test -x configure || ./autogen.sh

          # Configure with --without-zlib
          emconfigure ./configure \
            --host=wasm32-unknown-emscripten \
            --disable-shared \
            --without-python \
            --without-zlib \
            --without-lzma \
            --disable-dependency-tracking \
            --prefix=$(pwd)/build

          emmake make -j$(nproc)
          emmake make install
          cd ..

      - name: Export oniguruma paths for PHP
        run: |
          echo "ONIG_CFLAGS=-I${GITHUB_WORKSPACE}/oniguruma/build/include" >> $GITHUB_ENV
          echo "ONIG_LIBS=${GITHUB_WORKSPACE}/oniguruma/build/lib/libonig.a" >> $GITHUB_ENV

      - name: Clean previous builds
        run: |
          git clean -xfd || true
          if [ -f Makefile ]; then make clean || true; fi
          rm -rf config.cache autom4te.cache || true

      - name: Generate configure script
        run: |
          source ./emsdk/emsdk_env.sh
          ./buildconf --force

      - name: Configure PHP with Emscripten
        env:
          LIBXML_CFLAGS: "-I${GITHUB_WORKSPACE}/libxml2/build/include"
          LIBXML_LIBS: "-L${GITHUB_WORKSPACE}/libxml2/build/lib -lxml2"
          ONIG_CFLAGS: "${{ env.ONIG_CFLAGS }}"
          ONIG_LIBS: "${{ env.ONIG_LIBS }}"
          CFLAGS: "-O2 -sALLOW_MEMORY_GROWTH=1 -sENVIRONMENT=web,worker -sEXPORTED_FUNCTIONS=[_main,_php_embed_init,_php_embed_shutdown] -sEXPORTED_RUNTIME_METHODS=[cwrap,ccall]"
          CC: emcc
          CXX: em++
        run: |
          source ./emsdk/emsdk_env.sh
          emconfigure ./configure \
            --host=wasm32-unknown-emscripten \
            --disable-all \
            --disable-cli \
            --disable-cgi \
            --disable-phpdbg \
            --without-pear \
            --with-libxml \
            --enable-embed=static \
            --enable-simplexml \
            --enable-xml \
            --enable-session \
            --enable-mbstring \
            --enable-tokenizer \
            --enable-filter \
            --enable-posix \
            LIBXML_CFLAGS="$LIBXML_CFLAGS" \
            LIBXML_LIBS="$LIBXML_LIBS" \
            ONIG_CFLAGS="$ONIG_CFLAGS" \
            ONIG_LIBS="$ONIG_LIBS" 

      - name: Show config.log if configure fails
        if: failure()
        run: |
          echo "configure failed, showing config.log:"
          find . -name config.log -exec cat {} \;

      - name: Compile PHP to WASM
        run: |
          source ./emsdk/emsdk_env.sh
          emmake make -j$(nproc) > build.log 2>&1 || (cat build.log && false)

      - name: Package output into worker.js
        run: |
          mkdir -p dist
          WASM_FILE=$(find sapi -name '*.wasm' | head -n1)
          if [ ! -f "$WASM_FILE" ]; then echo "No .wasm file found!" && exit 1; fi
          base64 "$WASM_FILE" > dist/php.wasm.base64
          WASM_BASE64_CONTENT=$(cat dist/php.wasm.base64)
          cat > dist/worker.js <<EOF
          const wasmBase64 = \`${WASM_BASE64_CONTENT}\`;
          addEventListener('fetch', event => {
          event.respondWith(new Response('PHP WASM Ready'));
          });
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasmphp
          path: dist/
